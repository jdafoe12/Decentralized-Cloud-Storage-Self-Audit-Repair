

enclave {

	include "sharedTypes.h"
	from "sgx_tstdc.edl" import *;
	from "sgx_pthread.edl" import *;

	trusted {

		public void ecall_init();
		public int ecall_file_init([in, string] const char *fileName,[out] Tag *tag,[out, size=10, count=10] uint8_t *sigma, int numBlocks);
		public void ecall_audit_file([in, string] const char *fileName,[out] int *ret);
		public void ecall_generate_file_parity(int fileNum);
		public void ecall_decode_partition([in, string] const char *fileName, int blockNum);
	};

	untrusted {

		void ocall_get_time([out] uint64_t *outTime);

		void ocall_ftl_init([in, count=64] uint8_t *sgx_pubKey, [out,count=64] uint8_t *ftl_pubKey);

		void ocall_get_block([out, count=4096] uint8_t *data, size_t segSize, int segPerBlock, int blockNum,[in, size=1024] char *fileName);

		void ocall_printf([in, count=size] unsigned char *buffer, size_t size, int type);

		void ocall_printint([in, count=1] int *buffer);

		void ocall_send_nonce([in, count=16] uint8_t *nonce);

		void ocall_get_segment([in, string] const char *fileName, int segNum,[out, size=SEGMENT_SIZE] uint8_t *segData, int type);

		void ocall_init_parity(int numBits);

		void ocall_send_parity(int startPage, [in, size=size] uint8_t *parityData, size_t size);

		void ocall_end_genPar();

		void ocall_write_partition(int numBits);

		void ocall_write_page(int pageNum, [in, size=2048] uint8_t *pageData);

	};
};

